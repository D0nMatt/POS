// Este archivo define el proveedor de la base de datos y el generador del cliente.
datasource db {
  provider = "sqlite" // Usaremos SQLite para desarrollo local, es súper simple.
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ========= MODELOS =========

// Modelo para los Usuarios (Administradores y Trabajadores)
model User {
  id        Int      @id @default(autoincrement()) // ID numérico único
  email     String   @unique // El email debe ser único para cada usuario
  name      String
  password  String   // Guardaremos la contraseña encriptada aquí
  role      String   @default("WORKER") // Puede ser "WORKER" o "ADMIN"
  createdAt DateTime @default(now()) // Fecha de creación del registro

  sales     Sale[]   // Un usuario puede tener muchas ventas
}

//Productos del inventario
model Product {
  id        Int      @id @default(autoincrement())
  name      String   @unique // El nombre del producto debe ser único
  price     Float    // Precio de venta del producto
  stock     Int      @default(0) // Cantidad de unidades en inventario
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // Se actualiza automáticamente al modificar

  saleItems SaleItem[] // Un producto puede estar en muchos items de venta
}

// ========= NUEVOS MODELOS PARA LAS VENTAS =========

model Sale {
  id        Int      @id @default(autoincrement())
  total     Float    // Monto total de la venta
  createdAt DateTime @default(now())
  
  userId    Int      // Clave foránea para el usuario
  user      User     @relation(fields: [userId], references: [id]) // Relación con el usuario
  
  items     SaleItem[] // Una venta tiene muchos items
}

model SaleItem {
  id        Int      @id @default(autoincrement())
  quantity  Int      // Cantidad del producto vendido
  price     Float    // Precio del producto al momento de la venta
  
  saleId    Int      // Clave foránea para la venta
  sale      Sale     @relation(fields: [saleId], references: [id])
  
  productId Int      // Clave foránea para el producto
  product   Product  @relation(fields: [productId], references: [id])
}