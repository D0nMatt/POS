datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ========= MODELOS DE USUARIOS E INVENTARIO =========
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      String   @default("WORKER")
  createdAt DateTime @default(now())

  sales      Sale[]
  timeClock  TimeClock[]
  cashShifts CashShift[] // Un usuario puede abrir/cerrar varios turnos
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  products  Product[]
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  productType String     @default("PRODUCTO")
  status      String     @default("ACTIVO")
  value       Float
  cost        Float      @default(0)
  stock       Int        @default(0)
  minStock    Int?
  maxStock    Int?
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id])
  sku         String?    @unique
  description String?
  imageUrl    String?
  unit        String     @default("unit")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  saleItems   SaleItem[]
}

// ========= MODELOS FINANCIEROS Y DE TURNOS =========

// --- Modelo para Bancos/Cuentas ---
// Cualquier lugar donde se pueda almacenar dinero.
model Bank {
  id        Int      @id @default(autoincrement())
  name      String   @unique // Ej: "Caja Principal", "Cuenta de Ahorros", "Caja Fuerte"
  type      String // Ej: "CASH_REGISTER", "BANK_ACCOUNT", "SAFE"
  balance   Float    @default(0) // Saldo actual
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con transacciones
  transactions Transaction[]
}

// --- Modelo para Turnos de Caja ---
// Registra la apertura y cierre de la caja para un usuario.
model CashShift {
  id              Int       @id @default(autoincrement())
  openingBalance  Float // Saldo inicial con el que se abrió
  closingBalance  Float? // Saldo final contado por el usuario
  expectedBalance Float? // Saldo esperado (inicial + ventas en efectivo)
  difference      Float? // Diferencia entre el contado y el esperado
  openedAt        DateTime  @default(now())
  closedAt        DateTime?
  status          String    @default("OPEN") // "OPEN", "CLOSED"

  userId Int
  user   User @relation(fields: [userId], references: [id])

  transactions Transaction[] // Transacciones ocurridas durante este turno
}

// --- Modelo de Transacciones ---
// Cada movimiento de dinero se registra aquí.
model Transaction {
  id          Int      @id @default(autoincrement())
  type        String // "SALE", "EXPENSE", "TRANSFER_IN", "TRANSFER_OUT", "OPENING_SHIFT"
  amount      Float // Monto de la transacción
  description String
  createdAt   DateTime @default(now())

  // A qué banco pertenece esta transacción
  bankId Int
  bank   Bank @relation(fields: [bankId], references: [id])

  // Si la transacción ocurrió durante un turno de caja
  cashShiftId Int?
  cashShift   CashShift? @relation(fields: [cashShiftId], references: [id])

  // Si la transacción está ligada a una venta
  saleId Int?  @unique // Una transacción de venta solo puede estar ligada a una venta
  sale   Sale? @relation(fields: [saleId], references: [id])
}

// ========= MODELOS DE VENTAS =========

model Sale {
  id        Int      @id @default(autoincrement())
  total     Float
  status    String   @default("PENDING") // "PENDING", "COMPLETED"
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  tableId Int?
  table   Table? @relation(fields: [tableId], references: [id])

  items       SaleItem[]
  transaction Transaction? // Cada venta completada tendrá una transacción asociada
}

model SaleItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  price     Float
  saleId    Int
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

// ========= MODELOS AUXILIARES =========

model Table {
  id     Int    @id @default(autoincrement())
  name   String @unique
  status String @default("available")
  shape  String @default("square")
  x      Float  @default(0)
  y      Float  @default(0)
  width  Float  @default(100)
  height Float  @default(100)
  sales  Sale[]
}

model TimeClock {
  id       Int       @id @default(autoincrement())
  clockIn  DateTime
  clockOut DateTime?
  userId   Int
  user     User      @relation(fields: [userId], references: [id])
}
